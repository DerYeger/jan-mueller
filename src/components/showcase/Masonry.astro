---
import Brick from '~/components/showcase/Brick.astro'
import Mark from '~/components/showcase/Mark.astro'
import Showcase from '~/components/showcase/Showcase.astro'
import ShowcaseDescription from '~/components/showcase/ShowcaseDescription.astro'
import ShowcaseTitle from '~/components/showcase/ShowcaseTitle.astro'

const name = 'Masonry Wall'

const bricks = Array.from({ length: 9 }, (_, index) => index % 2).sort(
  () => Math.random() - 0.5
)
---

<Showcase name={name} link="https://vue-masonry-wall.yeger.eu">
  <div
    class="bricks absolute -inset-1 top-0 flex flex-wrap-reverse content-start items-end justify-between"
  >
    {
      bricks.map((hidden, index) => {
        const color = [
          'from-red-900 to-red-500',
          'from-orange-400 to-orange-200',
          'from-stone-700 to-stone-400',
        ][index % 3]
        return hidden ? (
          <Brick
            class={`brick-hidden translate-y-[-2000%] transition-transform duration-1000`}
            color={color}
          />
        ) : (
          <Brick color={color} />
        )
      })
    }
  </div>
  <div class="prose dark:prose-invert relative">
    <ShowcaseTitle>{name}</ShowcaseTitle>
    <ShowcaseDescription>
      My popular <Mark>Vue component</Mark> for dynamic <Mark>
        masonry layouts
      </Mark>.
    </ShowcaseDescription>
  </div>
</Showcase>

<script>
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) {
          return
        }
        setTimeout(() => {
          const brickContainers = [...document.getElementsByClassName('bricks')]
          brickContainers.forEach((brickContainer) => {
            const bricks = [
              ...brickContainer.getElementsByClassName('brick-hidden'),
            ]
            makeBrickVisible(bricks)
          })
        }, 500)
        observer.unobserve(entry.target)
      })
    },
    { threshold: 0.9 }
  )

  const containers = [...document.getElementsByClassName('bricks')]
  containers.forEach((brickContainer) => {
    observer.observe(brickContainer)
  })

  function makeBrickVisible(bricks: Element[]) {
    const [brick, ...rest] = bricks
    brick.classList.remove('translate-y-[-2000%]', 'brick-hidden')
    if (rest.length > 0) {
      setTimeout(() => makeBrickVisible(rest), Math.random() * 25 + 75)
    }
  }
</script>
