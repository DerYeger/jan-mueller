---
import Brick from '~/components/showcase/Brick.astro'
import Mark from '~/components/showcase/Mark.astro'
import Showcase from '~/components/showcase/Showcase.astro'
import ShowcaseDescription from '~/components/showcase/ShowcaseDescription.astro'
import ShowcaseTitle from '~/components/showcase/ShowcaseTitle.astro'

const name = 'Masonry Wall'

const bricks = [false, true, false, false, true, false, true, false, true]
if (bricks.length !== 9) {
  throw new Error('Must be 9 bricks')
}
---

<Showcase name={name} link="https://vue-masonry-wall.janmueller.dev">
  <div
    class="bricks absolute -inset-1 top-0 flex flex-wrap-reverse content-start items-end justify-between"
  >
    {
      bricks.map((hidden, index) => {
        const color = [
          'from-red-900 to-red-500',
          'from-orange-400 to-orange-300',
          'from-stone-700 to-stone-400',
        ][index % 3]
        return hidden ? (
          <Brick class="brick-hidden" color={color} />
        ) : (
          <Brick color={color} />
        )
      })
    }
  </div>
  <div class="prose">
    <ShowcaseTitle>{name}</ShowcaseTitle>
    <ShowcaseDescription>
      My popular <Mark>Vue component</Mark> for dynamic <Mark>
        masonry layouts
      </Mark> with SSR support.
    </ShowcaseDescription>
  </div>
</Showcase>

<script>
const className = 'brick-hidden'
const animationClasses = ['translate-y-[-3000%]']
const observer = new IntersectionObserver(
  (entries) => {
    entries.forEach((entry) => {
      const bricks = [...entry.target.getElementsByClassName(className)]
      if (!entry.isIntersecting) {
        bricks.forEach((brick) => {
          brick.classList.add(
            ...animationClasses,
          )
        })
        return
      }
      observer.unobserve(entry.target)
      makeBrickVisible(bricks)
    })
  },
  { threshold: 0.9 },
)

const containers = [...document.getElementsByClassName('bricks')]
containers.forEach((brickContainer) => observer.observe(brickContainer))

function makeBrickVisible(bricks: Element[]) {
  const [brick, ...rest] = bricks
  brick.classList.add('transition-transform', 'duration-1000')
  brick.classList.remove(className, ...animationClasses)
  if (rest.length > 0) {
    setTimeout(() => makeBrickVisible(rest), Math.random() * 25 + 75)
  }
}
</script>
