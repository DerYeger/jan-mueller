---
import type { PhotoData } from '~/components/showcase/Photo.astro'
import Photo from '~/components/showcase/Photo.astro'
import Showcase from '~/components/showcase/Showcase.astro'

const photos: PhotoData[] = [
  {
    src: import('~/assets/photos/rauris.png'),
    alt: (location) => `A green forest in ${location}.`,
    location: 'Rauris, Austria',
  },
  {
    src: import('~/assets/photos/binz.png'),
    alt: (location) => `Beach and dunes in ${location}.`,
    location: 'Binz, Germany',
  },
  {
    src: import('~/assets/photos/semmering.png'),
    alt: (location) => `Mountainous landscape near ${location}.`,
    location: 'Semmering, Austria',
  },
  {
    src: import('~/assets/photos/doernberg.png'),
    alt: (location) => `A single tree on a hill near ${location}.`,
    location: 'DÃ¶rnberg, Germany',
  },
]
---

<Showcase
  name="Photos"
  class="photos h-0 border-0 !bg-transparent !p-0 !pb-[100%]"
>
  {
    photos.map((photo, index) => (
      <Photo photo={photo} initial={index === 0} index={index} total={photos.length} />
    ))
  }
</Showcase>

<script>
  ;[...document.getElementsByClassName('photos')].forEach((container) => {
    const images = container.getElementsByClassName('photo')
    const length = images.length
    let timeout: number | undefined
    let current = 0

    const dots = [...container.getElementsByClassName('dot')] as HTMLElement[]
    dots.forEach((dot) => {
      dot.addEventListener('click', () => {
        const index = dot.dataset.index
        if (!index) {
          return
        }
        showImage(parseInt(index, 10))
      })
    })

    container.addEventListener('pointerenter', clearQueuedImage)
    container.addEventListener('pointerleave', queueNextImage)

    container.addEventListener('touchstart', startTouchSwipe)
    container.addEventListener('touchend', endTouchSwipe)

    let touchStart: Touch | undefined

    function startTouchSwipe(event: Event) {
      event.preventDefault()
      touchStart = (event as TouchEvent).changedTouches[0]
    }

    function endTouchSwipe(event: Event) {
      if (!touchStart) {
        return
      }
      const touchEnd = (event as TouchEvent).changedTouches[0]
      const xDiff = touchEnd.screenX - touchStart.screenX
      const yDiff = touchEnd.screenY - touchStart.screenY
      touchStart = undefined
      // Must be a pronounced horizontal swipe.
      if (5 * Math.abs(yDiff) > Math.abs(xDiff)) {
        return
      }
      event.preventDefault()
      const direction = xDiff > 0 ? -1 : 1
      showImage(coerceInRange(current + direction))
      queueNextImage()
    }

    queueNextImage()

    function clearQueuedImage() {
      if (!timeout) {
        return
      }
      window.clearTimeout(timeout)
      timeout = undefined
    }

    function queueNextImage() {
      clearQueuedImage()
      timeout = window.setTimeout(() => {
        showImage(coerceInRange(current + 1))
        queueNextImage()
      }, 5000)
    }

    function showImage(index: number) {
      if (index === current) {
        return
      }
      toggleImage(current)
      toggleImage(index)
      current = index
    }

    function toggleImage(index: number) {
      images[index].classList.toggle('opacity-0')
      images[index].classList.toggle('z-10')
    }

    // Replace the modulo operator with a function that works with negative numbers.
    function coerceInRange(index: number) {
      return ((index % length) + length) % length
    }
  })
</script>
