---
import { Icon } from 'astro-icon/components'

interface Props {
  name?: string
  class?: string
  href?: string
}

const { name, class: extraClasses = '', href } = Astro.props
---

<div
  class={`experiment card group relative flex h-full w-full flex-col justify-between gap-6 overflow-hidden p-6 no-underline ${extraClasses}`}
  aria-label={name}
>
  <slot />
  {href ? <div class="flex w-full justify-end">
    <a
      href={href}
      rel="prefetch"
      aria-label={name}
      class="z-20 block h-[2em] w-[2em] rounded-full border-2 border-current bg-white p-1 text-neutral-400 transition-all duration-500 hover:text-black hover:shadow-xl dark:bg-transparent dark:text-neutral-400 hover:dark:text-white"
    >
      <Icon name="radix-icons:arrow-top-right" />
    </a>
  </div> : null}
</div>

<script>
  const animationClasses = [
    'motion-safe:opacity-0',
    'motion-safe:-translate-y-4',
  ]
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const children = [
          ...entry.target.getElementsByClassName('experiment-animate'),
        ]
        if (!entry.isIntersecting) {
          children.forEach((element) => {
            element.classList.add(...animationClasses)
          })
          return
        }
        observer.unobserve(entry.target)
        children.forEach((element, index) => {
          setTimeout(() => {
            element.classList.add('transition-all', 'duration-500')
            element.classList.remove(...animationClasses)
          }, index * 100)
        })
      })
    },
    { threshold: 0.1 }
  )

  const showcases = [...document.getElementsByClassName('experiment')]
  showcases.forEach((showcase) => observer.observe(showcase))
</script>
