<script>
  function initNavIndicator() {
    const navs = document.querySelectorAll('.nav-with-indicator')

    navs.forEach((navElement) => {
      const nav = navElement as HTMLElement
      const indicator = nav.querySelector('.nav-indicator') as HTMLElement
      if (!indicator) {
        return
      }

      const links = nav.querySelectorAll('a')
      const activeLink: HTMLAnchorElement | null = nav.querySelector('a[data-active="true"]')

      let currentLink: HTMLAnchorElement | null = null

      const moveIndicatorToLink = (link: HTMLAnchorElement) => {
        currentLink = link
        const rect = link.getBoundingClientRect()
        const navRect = nav.getBoundingClientRect()
        nav.style.setProperty('--indicator-width', `${rect.width}px`)
        nav.style.setProperty('--indicator-left', `${rect.left - navRect.left}px`)
        indicator.style.opacity = '1'
      }

      const removeIndicatorFromLink = () => {
         if (activeLink) {
            moveIndicatorToLink(activeLink)
          } else {
            indicator.style.opacity = '0'
          }
      }

      if (activeLink) {
        moveIndicatorToLink(activeLink)
        indicator.style.opacity = '0'
        currentLink = null
      }

      const indicatorGainEvents = ['focusin', 'mouseenter']
      links.forEach((link) => {
        indicatorGainEvents.forEach((event) =>
          link.addEventListener(event, () => moveIndicatorToLink(link))
        )
        link.addEventListener('focusout', removeIndicatorFromLink)
      })

      nav.addEventListener('mouseleave', removeIndicatorFromLink)

      window.matchMedia('(min-width: 350px)').addEventListener('change', () => {
        if (currentLink) {
          // Force recalculation of indicator width
          moveIndicatorToLink(currentLink)
        }
      })
    })
  }

  window.addEventListener('load', () => initNavIndicator(), { once: true })
</script>
